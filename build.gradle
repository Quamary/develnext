allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    sourceCompatibility = 1.6
    targetCompatibility = 1.6

    group = 'org.develnext.ide'
    version = '0.1'

    repositories {
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        mavenCentral()
    }

    project.ext.isSnapshot = true;

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            resources {
                srcDir 'src/main/resources'
                srcDir 'src/main/java'
                srcDir 'src/main/php'
            }
        }
    }

    // dist
    ext.distPath = "$rootProject.buildDir/dist-" + project.version

    task collectJars(type: Copy, overwrite: true){
        into "$project.ext.distPath/libs"
        from configurations.runtime
        exclude "jphp-*"
    }

    task copyRuntimeLibs(type: Copy, dependsOn: "jar", overwrite: true) {
        into "$project.ext.distPath/libs"
        from "$libsDir/" + jar.archiveName
        rename jar.archiveName, "$jar.baseName." + jar.extension
    }

    task buildPortableDef(dependsOn: [copyRuntimeLibs, collectJars], overwrite: true) {
        copy {
            from "sdk/"
            into "$project.ext.distPath/sdk"
        }
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 300, 'seconds'
}

dependencies {
    compile project(':jphp-core')
    compile project(':jphp-swing-ext')
    compile project(':jphp-http-ext')
    compile project(':jphp-json-ext')

    compile project(':ui-syntax-ext')
    compile project(':ui-docking-ext')
    compile project(':ui-weblaf-ext')

    compile project(':ide-components-ext')
    compile project(':ide-standard-ext')

    testCompile 'junit:junit:4.+'
}

task dist(dependsOn: [buildPortableDef]) {
    copy {
        from "system/"
        into "$project.ext.distPath/system"
    }

    copy {
        from "launcher/"
        into "$project.ext.distPath"
        exclude "*.log"
        exclude "*.xml"
        exclude "*.ico"
    }

    // tools are gradle, portable jre, etc.
    copy {
        from "tools/"
        into "$project.ext.distPath/tools"
    }
}

task(start, dependsOn: "classes", type: JavaExec) {
    description = "Main start"
    main = "php.runtime.launcher.Launcher"
    classpath = sourceSets.main.runtimeClasspath
}


task distZip (type: Zip) {
    archiveName "dist-" + version + ".zip"
    from project.ext.distPath
    destinationDir buildDir
}

task wrapper(type: Wrapper) {
    gradleVersion = "1.12";
    distributionUrl = "http://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip";
}
